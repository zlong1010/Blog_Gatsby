{"componentChunkName":"component---src-templates-post-js","path":"/articles/目录1/目录1-1/Go/","result":{"data":{"markdownRemark":{"fields":{"articlePath":"/articles/目录1/目录1-1/Go/"},"html":"<h4>代码</h4>\n<pre><code class=\"language-go\">type Color byte\nstrings := []string {\"WHITE\", \"BLACK\", \"BLUE\", \"RED\", \"YELLOW\"}\n\ntype Box struct {\n  width, height, depth float64\n  color Color\n}\n\ntype BoxList []Box //a slice of boxes\n\n// 类似构造函数\nboxes := BoxList {\n  Box{4, 4, 4, RED},\n  Box{10, 10, 1, YELLOW},\n  Box{1, 1, 20, BLACK},\n  Box{10, 10, 1, BLUE},\n  Box{10, 30, 1, WHITE},\n  Box{20, 20, 20, YELLOW},\n}\n\ntype Interface interface {\n    sort.Interface //嵌入字段sort.Interface\n    Push(x interface{}) //a Push method to push elements into the heap\n    Pop() interface{} //a Pop elements that pops elements from the heap\n}\n\nlist := make(List, 3) // list 是类型\nlist[0] = 1 //an int\nlist[1] = \"Hello\" //a string\nlist[2] = Person{\"Dennis\", 70}\n\n// 匿名字段赋值\nrespData := struct {\n  FrontAppInfo\n  CurProxyId string\n} {\n  FrontAppInfo: GetFrontAppById(data.AppId),\n  CurProxyId: data.Id,\n}\n</code></pre>\n<blockquote>\n<p>上面的代码通过文字描述出来之后是不是很简单？我们一般解决问题都是通过问题的描述，去写相应的代码实现。</p>\n</blockquote>\n<h4>概念</h4>\n<blockquote>\n<ul>\n<li>类型没有层级</li>\n<li>Go程序是通过<code>package</code>来组织的</li>\n<li>\n<p>引用传递 &#x26; 值传递</p>\n<ul>\n<li>值传递--> 副本</li>\n</ul>\n</li>\n<li>匿名字段</li>\n<li>\n<p>变量有哪些类型</p>\n<ul>\n<li>interface 变量</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h4>环境配置</h4>\n<ul>\n<li>GOROOT</li>\n<li>GOPATH</li>\n<li><strong>根据package是main还是其他来决定，main的话就是可执行应用，其他的话就是应用包 ？</strong></li>\n<li>建议package的名称和目录名保持一致</li>\n</ul>\n<h4>基本语法</h4>\n<ul>\n<li>定义变量：<code>const</code>、<code>var</code>、<code>func</code></li>\n<li>无论什么定义方式，类型都紧跟着变量名。</li>\n</ul>\n<pre><code class=\"language-go\">//定义三个类型都是“type”的变量\nvar vname1, vname2, vname3 string\n\nvar vname1, vname2, vname3 string= v1, v2, v3\n</code></pre>\n<ul>\n<li><code>:=</code>  是 <code>var</code> 和 类型的简写。</li>\n<li>大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。</li>\n<li>大写字母开头的函数也是一样，相当于<code>class</code>中的带<code>public</code>关键词的公有函数；小写字母开头的就是有<code>private</code>关键词的私有函数。</li>\n</ul>\n<h4>修改字符串</h4>\n<pre><code class=\"language-go\">s := \"hello\"\nc := []byte(s)  // 将字符串 s 转换为 []byte 类型\nc[0] = 'c'\ns2 := string(c)  // 再转换回 string 类型\n\n// 或者\ns := \"hello\"\ns = \"c\" + s[1:] // 字符串虽不能更改，但可进行切片操作\n</code></pre>\n<h4>数组 &#x26; slice</h4>\n<blockquote>\n<p>定义数组：var list [4]string</p>\n<p>定义 slice：var slice []string</p>\n<p>slice: 动态数组， <code>slice</code>是引用类型，所以当引用改变其中元素的值时，其它的所有引用都会改变该值</p>\n</blockquote>\n<p><strong>定义数组：</strong> </p>\n<pre><code class=\"language-go\">var arr = [3]byte{'s', 'c', 'a'}\n</code></pre>\n<p>数组之间的赋值是值的赋值，即当把一个数组作为参数传入函数的时候，传入的其实是该数组的副本，而不是它的指针。如果要使用指针，那么就需要用到后面介绍的<code>slice</code>类型了。</p>\n<p><code>append</code> 函数会改变 <code>slice</code> 所引用的数组的内容，从而影响到引用同一数组的其它<code>slice</code>。 但当<code>slice</code>中没有剩余空间（即<code>(cap-len) == 0</code>）时，此时将动态分配新的数组空间。返回的<code>slice</code>数组指针将指向这个空间，而原数组的内容将保持不变；其它引用此数组的<code>slice</code>则不受影响。</p>\n<h4>map</h4>\n<ul>\n<li>定义</li>\n</ul>\n<pre><code class=\"language-go\">// 初始化一个字典\nrating := map[string]float32{\"C\":5, \"Go\":4.5, \"Python\":4.5, \"C++\":2 }\n// map有两个返回值，第二个返回值，如果不存在key，那么ok为false，如果存在ok为true\ncsharpRating, ok := rating[\"C#\"]\n</code></pre>\n<ul>\n<li>遍历</li>\n</ul>\n<pre><code class=\"language-go\">for k,v:=range map {\n    fmt.Println(\"map's key:\",k)\n    fmt.Println(\"map's val:\",v)\n}\n</code></pre>\n<h4>struct &#x26; interface</h4>\n<blockquote>\n<p>使用 type 声明新的类型，类似别名</p>\n</blockquote>\n<pre><code class=\"language-go\">type age int\n\ntype Human struct {\n    name string\n    age int\n    phone string\n}\n\n// 定义interface\ntype Men interface {\n    SayHi()\n    Sing(lyrics string)\n    Guzzle(beerStein string)\n}\n</code></pre>\n<blockquote>\n<p>interface 类似泛型</p>\n</blockquote>\n<p>interface就是一组抽象方法的集合。</p>\n<p>interface 是一个抽象的概念，描述 method签名集合(不是具体的 method)，通过interface来定义对象的一组行为。描述行为而不是属性。</p>\n<p>最终的效果是可以把不同类型的值赋给同一个变量。这个变量定义为 interface ，“不同类型的值”这些值必须实现这个interface。</p>\n<p>interface的变量可以持有任意实现该interface类型的对象。</p>\n<p>**空 interface ** </p>\n<pre><code class=\"language-go\">type IEmpty interface {}\nvar a interface{}\nvar x struct {\n  name string\n}\n</code></pre>\n<p>所有的类型都实现了空interface。空interface对于描述起不到任何的作用(因为它不包含任何的method），但是空interface在我们需要存储任意类型的数值的时候相当有用，因为它可以存储任意类型的数值。</p>\n<p>任何实现了String方法的类型都能作为参数被fmt.Println调用。</p>\n<pre><code class=\"language-go\">package main\n\n    import (\n        \"fmt\"\n        \"strconv\"\n    )\n\n    type Element interface{}\n    type List [] Element\n\n    type Person struct {\n        name string\n        age int\n    }\n\n    //定义了String方法，实现了fmt.Stringer\n    func (p Person) String() string {\n        return \"(name: \" + p.name + \" - age: \"+strconv.Itoa(p.age)+ \" years)\"\n    }\n\n    func main() {\n        list := make(List, 3)\n        list[0] = 1 // an int\n        list[1] = \"Hello\" // a string\n        list[2] = Person{\"Dennis\", 70}\n\n        for index, element := range list {\n            if value, ok := element.(int); ok {\n                fmt.Printf(\"list[%d] is an int and its value is %d\\n\", index, value)\n            } else if value, ok := element.(string); ok {\n                fmt.Printf(\"list[%d] is a string and its value is %s\\n\", index, value)\n            } else if value, ok := element.(Person); ok {\n                fmt.Printf(\"list[%d] is a Person and its value is %s\\n\", index, value)\n            } else {\n                fmt.Printf(\"list[%d] is of a different type\\n\", index)\n            }\n        }\n    }\n</code></pre>\n<p><a href=\"https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.6.md\">参考</a> </p>\n<h4>函数</h4>\n<blockquote>\n<ul>\n<li>函数可以返回多个值</li>\n<li>当我们传一个参数值到被调用函数里面时，实际上是传了这个值的一份copy，当在被调用函数中修改参数值的时候，调用函数中相应实参不会发生任何变化，因为数值变化只作用在copy上。</li>\n<li>函数签名：func (r ReceiverType) funcName(parameters) (results)</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>操作地址</p>\n<pre><code class=\"language-go\">func add1(a *int) int { // 请注意，\n    *a = *a+1 // 修改了a的值\n    return *a // 返回新值\n}\n\nfunc main() {\n    x := 3\n    x1 := add1(&#x26;x)  // 调用 add1(&#x26;x) 传x的地址\n    fmt.Println(\"x+1 = \", x1) // 应该输出 \"x+1 = 4\"\n    fmt.Println(\"x = \", x)    // 应该输出 \"x = 4\"\n}\n</code></pre>\n<ul>\n<li><code>&#x26;</code> 取变量的地址，<code>*</code> 取地址中存的值。</li>\n<li>Go语言中<code>channel</code>，<code>slice</code>，<code>map</code>这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变<code>slice</code>的长度，则仍需要取地址传递指针）</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.3.md#%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%80%BC%E7%B1%BB%E5%9E%8B\">函数作为值传递</a> </p>\n<ul>\n<li>所有的值都需要声明类型，使用 type 声明新的类型</li>\n</ul>\n<pre><code class=\"language-go\">type typeName func(input1 inputType1 , input2 inputType2 [, ...]) (result1 resultType1 [, ...])\n</code></pre>\n</li>\n</ul>\n<h4><a href=\"https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.5.md#25-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\">面向对象</a></h4>\n<blockquote>\n<ul>\n<li><code>method</code>是附属在一个给定的类型上的</li>\n<li>通过这些内容，我们可以设计出基本的面向对象的程序了，但是Go里面的面向对象是如此的简单，没有任何的私有、公有关键字，通过大小写来实现(大写开头的为公有，小写开头的为私有)，方法也同样适用这个原则。</li>\n<li>如果一个method的receiver是*T,你可以在一个T类型的实例变量V上面调用这个method，而不需要&#x26;V去调用这个method</li>\n<li>如果一个method的receiver是T，你可以在一个*T类型的变量P上面调用这个method，而不需要 *P去调用这个method</li>\n</ul>\n</blockquote>\n<pre><code class=\"language-go\">// func (r ReceiverType) funcName(parameters) (results)\nfunc (r Rectangle) area() float64 {\n    return r.width*r.height\n}\n\nr1 := Rectangle{12, 2}\nr1.area()\n</code></pre>\n<p>方法的Receiver是以值传递，而非引用传递，是的，Receiver还可以是指针, 两者的差别在于, 指针作为Receiver会对实例对象的内容发生操作,而普通类型作为Receiver仅仅是以副本作为操作对象,并不对原实例对象发生操作。</p>\n<p>想要修改一个对象的值，就要使用指针传递。</p>\n<h4>内存</h4>\n<ul>\n<li>new 返回指针</li>\n</ul>","id":"fa25413d-751d-5e33-b381-b73a24058383","parent":{"__typename":"File","name":"Go","base":"Go.md","mtime":"2021-04-22T01:53:30.566Z","sourceInstanceName":"markdown"}}},"pageContext":{"articlePath":"/articles/目录1/目录1-1/Go/"}},"staticQueryHashes":["3507072554"]}